function [X_opt,obj_opt,flag,output,lambda,grad,hess,problem] = run_solver(prob, obj, x0, opts, filename_uuid)
    solver_based = true;
    % create folder for generated objectives if it doesn't already exist        
    if solver_based
        generated_folder = ['optimization/generated' filename_uuid];
        if ~exist(generated_folder,'dir')
            mkdir(generated_folder)
            addpath(generated_folder)
        end
        % Convert to solver-based
        problem = prob2struct(prob,x0,...
            'ObjectiveFunctionName',['generatedObjective' obj],...
            'FileLocation',generated_folder);
        problem.options = opts;
        
        % Run unscaled optimization
        [X_opt,obj_opt,flag,output,lambda,grad,hess] = fmincon(problem);
        
        if flag <= 0 % if the unscaled optimization did not arrive at an optimal
            % use the unscaled optimization hessian to find scale factor
            scale = 1./sqrt(diag(hess));

            % Formulate a new scaled optimization problem     
            problem_s = problem;
            problem_s.options.MaxIterations = 150;
            problem_s.options.MaxFunctionEvaluations = 2000;
            problem_s.objective = @(x) problem.objective(x .* scale);  
            problem_s.nonlcon   = @(x) problem.nonlcon(x .* scale);

            inv_scale = 1./(scale);
            if ~isempty(output.bestfeasible)
                problem_s.x0 = inv_scale .* output.bestfeasible.x;
            else
                problem_s.x0 = inv_scale .* X_opt;
            end
            problem_s.lb = inv_scale .* problem.lb;
            problem_s.ub = inv_scale .* problem.ub;

            % Run scaled optimization problem
            [X_opt,obj_opt,flag,output,lambda,grad,hess] = fmincon(problem_s);
            X_opt = scale .* X_opt;
        end
        
        % Rearrange and check outputs
        X_opt = [X_opt(1); X_opt(3); X_opt(6); X_opt(5); ...
            X_opt(4); X_opt(2); X_opt(7)]; % reorder elements based on order in autogenerated objective files

    else
        [opt_x, obj_opt, flag,output,lambda] = solve(prob,x0,'Options',opts);
        X_opt = [opt_x.D_sft opt_x.D_s_ratio opt_x.h_f_ratio ...
                opt_x.T_f_ratio opt_x.T_s_ratio opt_x.F_max ...
                opt_x.D_int opt_x.w_n];
    end
end