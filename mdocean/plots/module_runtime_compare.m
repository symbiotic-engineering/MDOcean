function [f1, f2, f3] = module_runtime_compare()
    p = parameters();
    b = var_bounds();
    
    X = [b.X_noms; 1];

    % just dynamics
    p.use_multibody = true;
    profile clear
    profile on
    simulation(X,p);
    p_multibody = profile('info');

    p.use_multibody = false;
    profile clear
    profile on
    simulation(X,p);
    p_singlebody = profile('info');

    t_multibody  = extract_runtime(p_multibody, 'get_response_drag');
    t_singlebody = extract_runtime(p_singlebody,'get_response_drag');

    gcp;
    time = tic;
    runRM3Parallel
    t_wecsim = toc(time); %447

    f1 = figure;
    cats = {'MDOcean Dynamics 1-DOF','MDOcean Dynamics 2-DOF','WecSim (Parallelized)'};
    times = [t_singlebody t_multibody t_wecsim];
    cats = reordercats(categorical(cats),cats);
    h = bar(cats,times);
    if ~isMATLABReleaseOlderThan('R2024b')
        h(1).Labels = h(1).YData;
    end
    title('Dynamics Runtime Comparison')
    subtitle('for all sea states')
    ylabel('Runtime (s)')
    h.Parent.YScale = 'log';
    h.Parent.YGrid  = 'on';
    improvePlot
    h.Parent.YMinorGrid = 'off';
    f1.Position = [100 100 600 640];

    % hydro
    % determine line numbers
    meem_filename = 'A_b_c_matrix_N10_M10_K10_heaving_outer';
    bessel_lines     = findStringInFile(meem_filename, 'bessel');
    unpack_lines     = findStringInFile(meem_filename, 'ct{:}');
    dispersion_lines = findStringInFile('run_MEEM','m_k_h_deg = fzero(eqn, bounds)');
    lin_solve_lines  = findStringInFile('run_MEEM','A_num\b_num');

    % extract times for line numbers
    t_hydro            = extract_runtime(p_singlebody,'get_dynamic_coeffs');
    t_hydro_bessels    = extract_runtime(p_singlebody,'ft_1',bessel_lines);
    t_hydro_unpack     = extract_runtime(p_singlebody,'ft_1',unpack_lines);
    t_hydro_dispersion = extract_runtime(p_singlebody,'compute_eigen_hydro_coeffs',dispersion_lines);
    t_hydro_lin_solve  = extract_runtime(p_singlebody,'compute_eigen_hydro_coeffs',lin_solve_lines);

    t_hydro_other = t_hydro - (t_hydro_bessels + t_hydro_unpack + t_hydro_dispersion + t_hydro_lin_solve);
    times_meem = [t_hydro_bessels t_hydro_unpack t_hydro_dispersion t_hydro_lin_solve t_hydro_other];

    t_capytaine = 0.323;

    sections_hydro = {'Bessel Functions','Unpacking Variables','Dispersion Relation','Linear Solve','Other'};
    num_freq_hydro = length([p.T p.T_struct]);
    times_hydro = [times_meem/num_freq_hydro 0; zeros(1,length(times_meem)) t_capytaine];
    cats_hydro = {'MDOcean MEEM','Capytaine'};
    cats_hydro = reordercats(categorical(cats_hydro),cats_hydro);

    f2 = figure;
    h = barh(cats_hydro,times_hydro,'stacked');
    legend(sections_hydro)
    title('Hydrodynamics Runtime Comparison')
    subtitle('for a single frequency')
    ylabel('Runtime (s)')
    if ~isMATLABReleaseOlderThan('R2024b')
        h(1).Labels = h(1).YData;
    end
    ax = h(1).Parent;
    split_labels_by_space(ax)
    improvePlot
    f2.Position = [100 100 1410 600];

    % comparing all modules
    
    t_struct = extract_runtime(p_singlebody,'structures_one_case');
    t_geom   = extract_runtime(p_singlebody,'geometry');
    t_econ   = extract_runtime(p_singlebody,'econ');

    t_modules = [t_geom,t_hydro,t_multibody,t_struct,t_econ];
    name_modules = {'Geometry','Hydrodynamics','Dynamics (2-DOF)','Structures','Economics'};
    name_modules = reordercats(categorical(name_modules),name_modules);

    f3 = figure;
    h = bar(name_modules,t_modules);
    if ~isMATLABReleaseOlderThan('R2024b')
        h(1).Labels = h(1).YData;
    end
    ylabel('Runtime (s)')
    title('Module Time Breakdown')
    split_labels_by_space(h.Parent)
    improvePlot
end

function runtime = extract_runtime(profile_results, func_name, line_num)

    % for inner funcs (with '>'), need to just take after the '>'
    func_list = {profile_results.FunctionTable.FunctionName};
    func_list(contains(func_list,'>')) = extractAfter( func_list(contains(func_list,'>')), '>');

    idx_func = strcmp(func_list, func_name);
    if ~exist('line_num','var') % all lines
        runtime = sum([profile_results.FunctionTable(idx_func).TotalTime]);
    else % specific lines
        line_matrix = profile_results.FunctionTable(idx_func).ExecutedLines;
        idx_lines = ismember(line_matrix(:,1),line_num);
        runtime = sum(line_matrix(idx_lines,3));
    end

end

function lineNumbers = findStringInFile(fileName, searchString)
% generated by matlab playground AI
    % Open the file for reading
    fid = fopen([fileName '.m'], 'r');
    if fid == -1
        error('File cannot be opened: %s', fileName);
    end

    lineNumbers = []; % Initialize an empty array to hold line numbers
    lineIndex = 1;    % Initialize line index

    % Read the file line by line
    while ~feof(fid)
        line = fgetl(fid); % Get the current line
        if contains(line, searchString) % Check if the line contains the search string
            lineNumbers(end + 1) = lineIndex; % Store the line number
        end
        lineIndex = lineIndex + 1; % Increment line index
    end

    % Close the file
    fclose(fid);
end

function split_labels_by_space(ax)
    old_labels = ax.YTickLabel;
    num_rows = 2;
    labelArray = cell([num_rows,length(old_labels)]);
    for i=1:length(old_labels)
        tmp = split(ax.YTickLabel(i));
        buffer = repmat({''}, num_rows - length(tmp), 1);
        labelArray(:,i) = [tmp buffer];
    end
    pattern = ['%s' repmat('\\newline%s' ,[1 num_rows-1]) '\n'];
    new_labels = strtrim(sprintf(pattern, labelArray{:}));
    ax.YTickLabel = new_labels;
end

